//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RoomData
{
    [DataContract(IsReference = true)]
    public partial class Tbl_PersonDetailsEntry: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long rowID
        {
            get { return _rowID; }
            set
            {
                if (_rowID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'rowID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _rowID = value;
                    OnPropertyChanged("rowID");
                }
            }
        }
        private long _rowID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string FatherName
        {
            get { return _fatherName; }
            set
            {
                if (_fatherName != value)
                {
                    _fatherName = value;
                    OnPropertyChanged("FatherName");
                }
            }
        }
        private string _fatherName;
    
        [DataMember]
        public string MotherName
        {
            get { return _motherName; }
            set
            {
                if (_motherName != value)
                {
                    _motherName = value;
                    OnPropertyChanged("MotherName");
                }
            }
        }
        private string _motherName;
    
        [DataMember]
        public Nullable<int> Qualification
        {
            get { return _qualification; }
            set
            {
                if (_qualification != value)
                {
                    _qualification = value;
                    OnPropertyChanged("Qualification");
                }
            }
        }
        private Nullable<int> _qualification;
    
        [DataMember]
        public Nullable<int> Profession
        {
            get { return _profession; }
            set
            {
                if (_profession != value)
                {
                    _profession = value;
                    OnPropertyChanged("Profession");
                }
            }
        }
        private Nullable<int> _profession;
    
        [DataMember]
        public Nullable<int> MaritalStatus
        {
            get { return _maritalStatus; }
            set
            {
                if (_maritalStatus != value)
                {
                    _maritalStatus = value;
                    OnPropertyChanged("MaritalStatus");
                }
            }
        }
        private Nullable<int> _maritalStatus;
    
        [DataMember]
        public Nullable<System.DateTime> DOB
        {
            get { return _dOB; }
            set
            {
                if (_dOB != value)
                {
                    _dOB = value;
                    OnPropertyChanged("DOB");
                }
            }
        }
        private Nullable<System.DateTime> _dOB;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public Nullable<long> City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private Nullable<long> _city;
    
        [DataMember]
        public Nullable<long> ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (_zipCode != value)
                {
                    _zipCode = value;
                    OnPropertyChanged("ZipCode");
                }
            }
        }
        private Nullable<long> _zipCode;
    
        [DataMember]
        public Nullable<long> Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private Nullable<long> _country;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public Nullable<System.DateTime> LastUpdate
        {
            get { return _lastUpdate; }
            set
            {
                if (_lastUpdate != value)
                {
                    _lastUpdate = value;
                    OnPropertyChanged("LastUpdate");
                }
            }
        }
        private Nullable<System.DateTime> _lastUpdate;
    
        [DataMember]
        public Nullable<bool> IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private Nullable<bool> _isActive;
    
        [DataMember]
        public Nullable<bool> IsPersonalIncomeExpenses
        {
            get { return _isPersonalIncomeExpenses; }
            set
            {
                if (_isPersonalIncomeExpenses != value)
                {
                    _isPersonalIncomeExpenses = value;
                    OnPropertyChanged("IsPersonalIncomeExpenses");
                }
            }
        }
        private Nullable<bool> _isPersonalIncomeExpenses;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
