//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RoomData
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Tbl_Login))]
    public partial class Tbl_Login: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long rowID
        {
            get { return _rowID; }
            set
            {
                if (_rowID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'rowID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Tbl_Login2 != null && Tbl_Login2.rowID != value)
                        {
                            Tbl_Login2 = null;
                        }
                    }
                    _rowID = value;
                    OnPropertyChanged("rowID");
                }
            }
        }
        private long _rowID;
    
        [DataMember]
        public string uid
        {
            get { return _uid; }
            set
            {
                if (_uid != value)
                {
                    _uid = value;
                    OnPropertyChanged("uid");
                }
            }
        }
        private string _uid;
    
        [DataMember]
        public string upwd
        {
            get { return _upwd; }
            set
            {
                if (_upwd != value)
                {
                    _upwd = value;
                    OnPropertyChanged("upwd");
                }
            }
        }
        private string _upwd;
    
        [DataMember]
        public Nullable<System.DateTime> createDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("createDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public string uname
        {
            get { return _uname; }
            set
            {
                if (_uname != value)
                {
                    _uname = value;
                    OnPropertyChanged("uname");
                }
            }
        }
        private string _uname;
    
        [DataMember]
        public string userType
        {
            get { return _userType; }
            set
            {
                if (_userType != value)
                {
                    _userType = value;
                    OnPropertyChanged("userType");
                }
            }
        }
        private string _userType;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Tbl_Login Tbl_Login1
        {
            get { return _tbl_Login1; }
            set
            {
                if (!ReferenceEquals(_tbl_Login1, value))
                {
                    var previousValue = _tbl_Login1;
                    _tbl_Login1 = value;
                    FixupTbl_Login1(previousValue);
                    OnNavigationPropertyChanged("Tbl_Login1");
                }
            }
        }
        private Tbl_Login _tbl_Login1;
    
        [DataMember]
        public Tbl_Login Tbl_Login2
        {
            get { return _tbl_Login2; }
            set
            {
                if (!ReferenceEquals(_tbl_Login2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (rowID != value.rowID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _tbl_Login2;
                    _tbl_Login2 = value;
                    FixupTbl_Login2(previousValue);
                    OnNavigationPropertyChanged("Tbl_Login2");
                }
            }
        }
        private Tbl_Login _tbl_Login2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Tbl_Login1 = null;
            Tbl_Login2 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupTbl_Login1(Tbl_Login previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (Tbl_Login1 != null)
            {
                ChangeTracker.ObjectStateChanging += Tbl_Login1.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Tbl_Login2, this))
            {
                previousValue.Tbl_Login2 = null;
            }
    
            if (Tbl_Login1 != null)
            {
                Tbl_Login1.Tbl_Login2 = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tbl_Login1")
                    && (ChangeTracker.OriginalValues["Tbl_Login1"] == Tbl_Login1))
                {
                    ChangeTracker.OriginalValues.Remove("Tbl_Login1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tbl_Login1", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (Tbl_Login1 != null && !Tbl_Login1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tbl_Login1.StartTracking();
                }
            }
        }
    
        private void FixupTbl_Login2(Tbl_Login previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Tbl_Login1, this))
            {
                previousValue.Tbl_Login1 = null;
            }
    
            if (Tbl_Login2 != null)
            {
                Tbl_Login2.Tbl_Login1 = this;
                rowID = Tbl_Login2.rowID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Tbl_Login2")
                    && (ChangeTracker.OriginalValues["Tbl_Login2"] == Tbl_Login2))
                {
                    ChangeTracker.OriginalValues.Remove("Tbl_Login2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Tbl_Login2", previousValue);
                }
                if (Tbl_Login2 != null && !Tbl_Login2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Tbl_Login2.StartTracking();
                }
            }
        }

        #endregion
    }
}
